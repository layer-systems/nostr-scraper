version: "3"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - 9200:9200
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data:Z
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
  logstash:
    # image: docker.elastic.co/logstash/logstash:8.8.0
    build:
      # context: ./logstash
      dockerfile: Dockerfile.logstash
    container_name: logstash
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:Z
      # - ./logstash/config:/usr/share/logstash/config:Z
    user: "1000:1000"
  nostr-scraper:
    build: .
    environment:
      INPUT_RELAY: wss://relay.nostr.band
      OUTPUT_RELAY: ws://relay:8080
      KINDS: "[0,1]"
    restart: always
    depends_on:
      - relay
      - postgres
  relay:
    # image: ghcr.io/mroxso/nostr-rs-relay:latest
    image: scsibug/nostr-rs-relay:latest
    container_name: relay
    user: "100:100"
    ports:
      - 8080:8080
    volumes:
      - ./data:/usr/src/app/db:Z
      - ./config.toml:/usr/src/app/config.toml
    depends_on:
      - postgres
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: justasimplepassword
      POSTGRES_USER: nostr
      POSTGRES_DB: nostr
    volumes:
      - ./postgres_data:/var/lib/postgresql/data:Z
    ports:
      - 5432:5432
  api:
    build: ./api
    container_name: api
    hostname: api
    domainname: api
    restart: always
    environment:
      DB_USER: nostr
      DB_PASSWORD: justasimplepassword
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: nostr
      DEBUG: "True"
    depends_on:
      - relay
      - postgres
    ports:
      - 8081:5000
  world:
    build: ./world
    container_name: world
    restart: always
    environment:
      API_URL: http://api:5000
    depends_on:
      - relay
      - postgres
      - api
    volumes:
      - ./world:/var/www/html/
    ports:
      - 80:80